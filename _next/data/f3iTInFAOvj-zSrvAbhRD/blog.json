{"pageProps":{"allBlogs":[{"frontmatter":{"title":"How to create a free static website with Github Pages","author":"Per Sunde ","date":"2020-04-25T15:23:44.000Z","hero_image":"/static/octocat_fluid.png"},"markdownBody":"You can get your own personal website at no cost. And if you want to have your own personal domain, all you need to do is buy is your own domain and you are covered!\nThere is one caveat, your website has to be made up of only static  files with no server side logic. This works well, for things like blogs, Single Page Applications or simple webpages for small companies and restaurants.\n\nYou can do this through Github Pages, or the equivalent Gitlab Pages.\nIn this guide we will use Gihub Pages and this page is hosted on Github Pages using this method.\n\n## Steps\n1. Create a Gihub account if you dont already have one\n2. Create a new branch called myusername.github.io\n\t* Make sure you change \"myusername\" with your Github username  \n3. Download NPM\n4. Create your React App \n5. Install gh-pages package\n6. Setup deployment config\n7. Create a dev branch\n8. Deploy your site\n9. Buy a domain and link it to your personal Github Pages website\n10. Setup HTTPS on your Github Page \n\n\n## 1 Create an Github account\nGo to https://github.com/ and sign up. \n\n## 2 Create a new repository\nGo to: https://github.com/new\n\nCreate a new repository, and name it: \n\n    myusername.github.io\n\nIn my case, my username is **persunde**, so my branch was named:\n\n    persunde.github.io\n\nCreate a file called README.md file in your repository.\n\n## 3 Download NPM\nIf you dont have it already you need to download NPM. To avoid future conflicts avoid downloading NPM via package managers and while using sudo. It may cause unnecessary problems and headaches.\nInstead download NPM as described here:\nhttps://github.com/nvm-sh/nvm#installing-and-updating\n\nBasically you need to do execute these three commands:\n\n    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\n    \n    wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\n    \n    export NVM_DIR=\"$([ -z \"${XDG_CONFIG_HOME-}\" ] && printf %s \"${HOME}/.nvm\" || printf %s \"${XDG_CONFIG_HOME}/nvm\")\"[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm\n\n> Other installation methods: https://docs.npmjs.com/downloading-and-installing-node-js-and-npm#using-a-node-version-manager-to-install-nodejs-and-npm\n\n## 4 Create your React App\nHere we will use Create-React-App, you can use any other tool you want, you just need a static webpage template up and running. Use create-react-app to create your react application.\n  \n\n 1. First clone your repository myusername.github.io and cd into your project\n 2. Create your React App, execute these commands in the root folder of your project\n\n\t    npx create-react-app my-app\n\t    cd my-app\n\nNow you can edit and work on your website as you see fit.\n\n## 5 Install gh-pages package\n**gh-pages** is a package that helps you to automate the deploying process, and make your project compatible with Github Pages.\nInside your project folder run this command to install gh.pages package:\n    \n    npm install gh-pages --save-dev\n\n## 6 Setup deployment config\nOpen the file \"**package.json**\" at the highest level, add this to the file:\n    \n    \"homepage\": \"https://myusername.github.io/\"\nOr\n\n\t\"homepage\": \"https://mydomain.com/\"\n\nAt the bottom of **\"scripts\"** in the same file add:\nIf you **have your own domain:**\n\n    \"predeploy\": \"npm run build\",\n    \"deploy\": \"gh-pages -b master -d build\"\nIf you **do NOT have your own domain** you need to add a **CNAME** file with your domain to the root of your deployment folder:\n\n    \"predeploy\": \"npm run build && echo \\\"mydomain.com\\\" > build/CNAME\",\n    \"deploy\": \"gh-pages -b master -d build\"\n\n> **NOTE:** If you are using **NEXT.JS**  do this instead:\n> \n>     \"predeploy\": \"next build && next export && echo \\\"mydomain.com\\\" > build/CNAME && touch out/.nojekyll\",\n>     \"deploy\": \"gh-pages -b master -d build --dotfiles true\"\n> \n> Github uses Jekyll to build your site, and it removes all files and\n> folders starting with \"_\", and NEXT.JS publishes your files under\n> folder \"_next/\".   So to avoid jekyll ignoring your build folder,\n> github requires that you adds a file called \".nojekyll\" to the root of\n> your project:  \n> https://github.blog/2009-12-29-bypassing-jekyll-on-github-pages/\n\nAt the end your file should look similar to this:\n\n    {\n\t    \"name\": \"my-app\",\n\t    \"version\": \"0.1.0\",\n\t    \"private\": true,\n\t    \"homepage\": \"https://mydomain.com/\"\n\t    \"dependencies\": {\n\t\t    \"@testing-library/jest-dom\": \"^4.2.4\",\n\t\t    \"@testing-library/react\": \"^9.3.2\",\n\t\t    \"@testing-library/user-event\": \"^7.1.2\",\n\t\t    \"react\": \"^16.13.1\",\n\t\t    \"react-dom\": \"^16.13.1\",\n\t\t    \"react-scripts\": \"3.4.1\"\n\t    },\n\t    \"scripts\": {\n\t\t    \"start\": \"react-scripts start\",\n\t\t    \"build\": \"react-scripts build\",\n\t\t    \"test\": \"react-scripts test\",\n\t\t    \"eject\": \"react-scripts eject\"\n\t\t    \"predeploy\": \"npm run build && echo \\\"mydomain.com\\\" > build/CNAME\", \n\t\t    \"deploy\": \"gh-pages -b master -d build\"\n\t    },\n\t    \"eslintConfig\": {\n\t\t    \"extends\": \"react-app\"\n\t    },\n\t    \"browserslist\": {\n\t\t    \"production\": [\n\t\t\t\">0.2%\",\n\t\t\t\"not dead\",\n\t\t\t\"not op_mini all\"\n\t\t    ],\n\t\t     \"development\": [\n\t\t\t\"last 1 chrome version\",\n\t\t\t\"last 1 firefox version\",\n\t\t\t\"last 1 safari version\"\n\t\t   ]\n\t    }\n    }\n\n## 7 Create a dev branch\nYou are required to publish your site through the master branch, and when you deploy the master branch will be overwritten. Therefore you should create a new dev branch first.\n\nRun these commands in your project folder\n\n    git add .\n    git commit -m 'create a seperate dev branch'\n    git co -b dev\n    git push\n\nNow make your new **dev** branch the default branch for your repository.\nGo to your repos\n\n 1. Open your Github repository in your browser\n\t * https://github.com/myusername/myusername.github.io\n 2. Click settings\n 3. Under **Branches** on the left menu\n 4. Change default branch **from master to dev**\n\n![Change default branch](https://i.imgur.com/fJwFIck.png)\n\n\n## 8 Deploy your site\nTo deploy your site and new changes you make to your site, execute this command in the root of your project folder:\n\n\tnpm run deploy\n\nNOTE: **DO NOT PULL ON THE GITHUB MASTER BRANCH**, THIS IS ONLY USED FOR DEPLOYING THE SITE\n\n## 9 Buy your own domain\nBuy any domain from a domain register like  [Namecheap.com](https://www.namecheap.com/).\nAfter you bougth your domain you need to point it to your Github Pages site, at myusername.github.io. You need to set these values in the website where you bought the domain:\n - Set **CNAME Recort** to host to \"www\" and value to \"myusername.github.io.\"\n - Add four **A Records**, all with host \"@\"\n\t - 185.199.108.153\n\t - 185.199.109.153\n\t - 185.199.110.153\n\t - 185.199.111.153\n\n![Domain setup](https://i.imgur.com/jkxj1HL.png)\n## 10 Setup HTTPS on your Github Page\nGo to your github project, select **setting** in the top right corner.\nScroll down until you find the Github Pages settings.\nWrite in your custom domain and select Enforce HTTPS. It will take a few minute until you will receive the SSL Certificate for the site. Github will take care of it for you.\n![Add your custum domain and enforce HTTPS](https://i.imgur.com/UnU1uGR.png)If you setup the deployment correctly, the custom domain should be automatically set, it is defined by the CNAME file in the root of your master branch, so **make sure you dont overwrite it** with bad data.\n\n> **NOTE**: If you use a **.dev** domain you HAVE to use HTTPS.\n\nNow your site should be up and running.\n<!--stackedit_data:\neyJoaXN0b3J5IjpbLTc4NDYwMTE0XX0=\n-->","slug":"How_to_create_a_free_static_website_with_Github_Pages"}],"title":"sunde.dev","description":"Starter blog using Tina CMS with Next.js."},"__N_SSG":true}